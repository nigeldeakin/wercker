box: golang:1.10
no-response-timeout: 15

build:
  docker: true
  base-path: /go/src/github.com/wercker/wercker
  steps:
    - install-packages:
        checkpoint: pkgs
        packages: openssh-client pkg-config libsystemd-dev

    - script:
        name: install govendor
        code: go get -u github.com/kardianos/govendor
    
    - script:
        name: install dependencies
        code: govendor sync

    - script:
        name: go vet
        code: govendor vet +local

    # - golint:
    #     exclude: vendor

    - script:
        name: Install docker and start a daemon (needed by integration tests)
        code: |
            # steps from https://docs.docker.com/install/linux/docker-ce/ubuntu/
            apt-get update -o Acquire::Check-Valid-Until=false # HACK to workaround expired certificate (or whatever)   
            yes | apt-get install apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"
            apt-get update -o Acquire::Check-Valid-Until=false # HACK to workaround expired certificate (or whatever) 
            yes | apt-get install docker-ce  
            ps -ef | grep docker
            echo DOCKER_HOST=$DOCKER_HOST
            docker info
            export DOCKERHOST=
            echo DOCKER_HOST=$DOCKER_HOST
            docker info
            # Start a docker daemon
            export DOCKER_HOST=
            systemctl enable docker
            ps -ef
    - script:
        name: Build wercker (needed by integration tests)
        code: go build    

    - script:
        name: go test
        code: govendor test -v +local               

    - script:
        name: Run integration tests
        code: ./test-all.sh  

    - script:
        name: clear out the build binaries
        code: rm -rf $GOPATH/pkg

    - script:
        name: compile linux_amd64
        code: |
            export CGO_ENABLED=0
            GOOS=linux GOARCH=amd64 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/artifacts/latest/linux_amd64/sentcli"

            cp -r $WERCKER_OUTPUT_DIR/artifacts/latest/* $WERCKER_REPORT_ARTIFACTS_DIR

    - script:
        name: compile linux_386
        code: |
            export CGO_ENABLED=0
            GOOS=linux GOARCH=386 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/artifacts/latest/linux_386/sentcli"

            cp -r $WERCKER_OUTPUT_DIR/artifacts/latest/* $WERCKER_REPORT_ARTIFACTS_DIR

    - script:
        name: compile darwin_amd64
        code: |
            export CGO_ENABLED=0
            GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-X github.com/wercker/wercker/util.GitCommit=$WERCKER_GIT_COMMIT -X github.com/wercker/wercker/util.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/wercker/wercker/util.Compiled=$(date +%s)" \
              -o "$WERCKER_OUTPUT_DIR/artifacts/latest/darwin_amd64/sentcli"

            cp -r $WERCKER_OUTPUT_DIR/artifacts/latest/* $WERCKER_REPORT_ARTIFACTS_DIR

    - script:
        name: wercker version
        code: |
          $WERCKER_OUTPUT_DIR/artifacts/latest/linux_amd64/sentcli version --no-update-check
          $WERCKER_OUTPUT_DIR/artifacts/latest/linux_amd64/sentcli --version > "$WERCKER_REPORT_MESSAGE_FILE"

    # generate SHA's for all binaries
    - script:
        name: generate SHAs
        code: |
            cd $WERCKER_OUTPUT_DIR
            for f in $(find . -type f -name sentcli); do
            cd $WERCKER_OUTPUT_DIR/$(dirname "$f")
            sha256sum sentcli > SHA256SUMS
            echo "$f: $(cat SHA256SUMS | awk '{print $1}')"
            done
            cd $WERCKER_OUTPUT_DIR

    - script:
        name: prepare
        code: cp -r scripts $WERCKER_OUTPUT_DIR

deploy:
  box: ubuntu
  steps:
    - script:
        name: update certs
        code: |
            sudo apt-get update -y
            sudo apt-get install ca-certificates -y

    - script:
        name: prepare
        code: |
            echo $WERCKER_GIT_COMMIT > ./artifacts/HEAD
            cp -r ./artifacts/latest ./artifacts/$WERCKER_GIT_COMMIT

    - s3sync:
        source-dir: "./artifacts"
        delete-removed: false
        bucket-url: $AWS_BUCKET_URL/$WERCKER_GIT_BRANCH/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

#

run-tests:
  box:
    id: golang:1.7
    volumes: $CODE_PATH /var/run/docker.sock
  steps:
      - script:
          code: |
              unset WERCKER_BUILD_ID
              cd $CODE_PATH
              ./test-all.sh

release-stable:
  steps:
    - install-packages:
        packages: jshon

    - script:
        name: version
        code: |
            export WERCKER_VERSION=$(./artifacts/latest/linux_amd64/sentcli --version | awk '{print $3}')
            ./artifacts/latest/linux_amd64/sentcli version --json > ./artifacts/latest/version.json
            echo "Releasing wercker stable v$WERCKER_VERSION" > $WERCKER_REPORT_MESSAGE_FILE
            echo "Releasing wercker stable v$WERCKER_VERSION"

    - script:
        name: rename sentcli to wercker
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;
            find . -type f -name SHA256SUMS -exec sed -i 's/sentcli/wercker/g' {} +

    # Upload the binaries to our own s3 buckets
    - s3sync:
        name: Upload to latest
        source-dir: "./artifacts/latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/stable/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        name: Upload to versions
        source-dir: "./artifacts/latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/versions/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    # Create release on GitHub and add binaries
    - script:
        name: generate release notes
        code: |
          export RELEASE_NOTES=$(jshon -s "$(./scripts/create-release-notes.sh)" | sed 's/.$//; s/^.//')
          echo $RELEASE_NOTES

    - github-create-release:
        token: $GITHUB_TOKEN
        tag: $WERCKER_VERSION
        body: $RELEASE_NOTES

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: ./artifacts/latest/linux_amd64/wercker
        filename: wercker_linux_amd64
        content-type: application/octet-stream

    - github-upload-asset:
        token: $GITHUB_TOKEN
        file: ./artifacts/latest/darwin_amd64/wercker
        filename: wercker_darwin_amd64
        content-type: application/octet-stream

    # Signal wercker/homebrew
    - script:
        name: Trigger homebrew release
        code: |
          export DARWIN_SHA256=$(awk '{print $1}' "./artifacts/latest/darwin_amd64/SHA256SUMS")
          curl \
            -X POST \
            -H "Authorization: Bearer $WERCKER_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{ \"message\": \"Release stable $WERCKER_VERSION\", \"pipelineId\": \"$HOMEBREW_PIPELINE_ID\", \"envVars\": [{ \"key\": \"CHANNEL\", \"value\": \"stable\" },{ \"key\": \"VERSION\", \"value\": \"$WERCKER_VERSION\" },{ \"key\": \"SHA256\", \"value\": \"$DARWIN_SHA256\" }] }" \
            https://app.wercker.com/api/v3/runs

release-beta:
  steps:
    - script:
        name: version
        code: |
            export WERCKER_VERSION="$(./artifacts/latest/linux_amd64/sentcli --version | awk '{print $3}')-beta"
            ./artifacts/latest/linux_amd64/sentcli version --json > ./artifacts/latest/version.json
            echo "Releasing wercker beta v$WERCKER_VERSION" > $WERCKER_REPORT_MESSAGE_FILE
            echo "Releasing wercker beta v$WERCKER_VERSION"

    - script:
        name: rename sentcli to wercker
        code: |
            find . -type f -name "sentcli" -exec bash -c 'mv "${0}" ${0/%sentcli/wercker}' {} \;
            find . -type f -name SHA256SUMS -exec sed -i 's/sentcli/wercker/g' {} +

    # Upload the binaries to our own s3 buckets
    - s3sync:
        source-dir: "./artifacts/latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/beta/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - s3sync:
        source-dir: "./artifacts/latest"
        delete-removed: false
        bucket-url: $DOWNLOADS_BUCKET_URL/versions/$WERCKER_VERSION/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    # Signal wercker/homebrew
    - script:
        name: Trigger homebrew release
        code: |
          export DARWIN_SHA256=$(awk '{print $1}' "./artifacts/latest/darwin_amd64/SHA256SUMS")
          curl \
            -X POST \
            -H "Authorization: Bearer $WERCKER_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{ \"message\": \"Release beta $WERCKER_VERSION\",  \"pipelineId\": \"$HOMEBREW_PIPELINE_ID\", \"envVars\": [{ \"key\": \"CHANNEL\", \"value\": \"beta\" },{ \"key\": \"VERSION\", \"value\": \"$WERCKER_VERSION\" },{ \"key\": \"SHA256\", \"value\": \"$DARWIN_SHA256\" }] }" \
            https://app.wercker.com/api/v3/runs

canary:
  steps:
    - script:
        name: prepare
        code: |
            echo $WERCKER_GIT_COMMIT > ./artifacts/HEAD
            cp -r ./artifacts/latest ./artifacts/$WERCKER_GIT_COMMIT

    - s3sync:
        source-dir: "./artifacts"
        delete-removed: false
        bucket-url: $AWS_BUCKET_URL/canary-$WERCKER_GIT_BRANCH/
        key-id: $AWS_ACCESS_KEY_ID
        key-secret: $AWS_SECRET_ACCESS_KEY

    - script:
        name: Create canary deploy
        code: |
          data="{\"sentcliBranch\": \"canary-$WERCKER_GIT_BRANCH\", \"sentcliCommit\": \"$WERCKER_GIT_COMMIT\", \"users\": [ \"$CANARY_USERS\" ], \"percentage\": $CANARY_PERCENTAGE, \"total\": $CANARY_TOTAL, \"fastFailThreshold\": $CANARY_FAST_FAIL}"
          echo $data
          curl -X POST --data "$data" "$CANARY_ENDPOINT"
          if [ $? -ne 0 ]; then
            exit 1
          fi

